name: .NET Core Desktop

on: push
jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug]

    runs-on:
      windows-latest # For a list of available runner types, refer to
      # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: party.sln # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: src\test\party.test.unittest/party.test.unittest.csproj # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      SolutionExe: party
      Wap_Project_Directory: # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      Wap_Project_Path: # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Install the .NET Core workload
      - name: Install .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x

      - name: Install dependencies
        run: dotnet restore

      # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Restore the application
        run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
        env:
          Configuration: ${{ matrix.configuration }}

      # Execute all unit tests in the solution
      - name: Execute unit tests
        run: dotnet test --no-restore --verbosity normal

      # Execute code analysis
      - name: Run .NET Code Analysis
        uses: dotnet/code-analysis@main
        id: code-analysis
        with:
          project: $env:Solution_Name
          build-breaking: true
          all-categories: all
          style: all

      # Upload the analysis results file
      - name: Upload analysis results
        uses: actions/upload-artifact@v2
        with:
          name: analysis_results.sarif
          path: ${{ steps.code-analysis.outputs.sarifFile }}
